---
-- A. Database Design
-- Database Name: OnlineRetailDB

-- B. TABLES
--customers:stores customer details.
--products:stores product details
--orders :stores order details
--orderItems:Stores details of each item in an order.
--Categories: stores product Categories;
--c.Insert  Sample Data
--Populate each table with sample data.

--D. Write Queries :
--Retrieve data (e.g. customer orders,popular products )
--Perform aggregations (e.g. total sales, average order value) 
--join tables for comprehensive reports.
--use Subqueries and common table expressions (CTEs).

--Create the database
--use the database
--Create the Customers table
--Create the Products table
--Create the Orders table
--Create the OrderItems table
--Create the Categories table

--Insert sample data into Categories table
--Insert sample data into Products table
--Insert sample data into Customers table
--Insert sample data into Orders table
--Insert sample data into OrderItems table

--Query 1: Retrieve all orders for a specific customer
--Query 2: Find the total sales for each product
--Query 3:Calculate the average order value
--Query 4:List the top 5 customers by total spending
--Query 5:Retrieve the most popular product category
--Query 6:List all products that are out of stock
--Query 7:Find customers who placed orders in the last 30 days
--Query 8:Calculate the total number of orders placed each month

CREATE DATABASE OnlineRetailDB;
GO;
use OnlineRetailDB;

Go;
CREATE TABLE Customers(CustomerId int PRIMARY KEY IDENTITY(1,1),
FirstName NVARCHAR(50),
LastName NVARCHAR(50),
Email NVARCHAR(100),
Phone NVARCHAR(50),
Address NVARCHAR(255),
City NVARCHAR(50),
State NVARCHAR(50),
ZipCode NVARCHAR(50),
Country NVARCHAR(50),
CreatedAt DATETIME DEFAULT GETDATE());

--
CREATE TABLE Products(
ProductID int PRIMARY KEY IDENTITY(1,1),
ProductName NVARCHAR(100),
CategoryID int,
Price DECIMAL(10,2),
Stock INT,
CreatedAt DATETIME DEFAULT GETDATE());
--CREATE the Categories table
CREATE TABLE Categories(CategoryID int PRIMARY KEY IDENTITY(1,1),
CategoryName NVARCHAR(100),Description NVARCHAR(255));
--CREATE the orders table

CREATE TABLE Orders(OrderID int PRIMARY KEY IDENTITY(1,1),
CustomerID int,
OrderDate DATETIME DEFAULT GETDATE(),
TotalAmount DECIMAL(10,2),
FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID));

--CREATE the OrderItems table

--ALTER / REname the column name

EXEC sp_rename 'OnlineRetailDB.dbo.Orders.CustomerId','CustomerID','COLUMN';

CREATE TABLE OrderItems(
OrderItemID int PRIMARY KEY IDENTITY(1,1),
OrderId int,
ProductId int,
Quantity int,
Price DECIMAL(10,2),
FOREIGN KEY(ProductId) REFERENCES Products(ProductID),
FOREIGN KEY(OrderId) REFERENCES Orders(OrderID));

--
INSERT INTO Categories(CategoryName,Description)VALUES('Electronics','Devices and Gadgets'),
('Clothing','Apparel and Accessories'),
('Books','Printed and Electronics Book');

INSERT INTO Products(ProductName,CategoryID,Price,Stock)VALUES('SmartPhone',1,699.99,50),('Laptop',1,999.99,30),('T-shirt',2,19.99,100),
('Jeans',2,49.99,200),('Fiction Novel',3,14.99,200),('Science Journal',3,29.99,150);

--
INSERT INTO Customers(FirstName,LastName,Email,Phone,Address,City,State,ZipCode,Country)
VALUES('Sameer','Khanna','sameer.khanna@example.com','123-456-7890','123 Elm St.','Sringfield','IL','67903','USA'),(
'Jane','Smith','jane.smith@example.com','234-567-8901','456 Oak St.','Madison','WI','98948','USA'),
('Alice','Bob','alice.bob@example.com','345-678-9012','789 Dalal St.','Mumbai','Maharashtra','41520','India');
--


INSERT INTO Orders(CustomerID,OrderDate,TotalAmount)
VALUES(1,GETDATE(),719.98),
(2,GETDATE(),49.99),
(3,GETDATE(),44.98);

--
INSERT INTO OrderItems(OrderID,ProductID,Quantity,Price)
values(1,1,1,699.99),(1,3,1,19.99),(2,4,1,49.99),(3,5,1,14.99),(3,6,1,29.99);

--Retrieve all orders for a specific customer
SELECT o.OrderID,o.OrderDate,o.TotalAmount,oi.ProductID,oi.ProductID,p.ProductName,oi.Quantity,oi.Price 
FROM Orders as o
JOIN OrderItems as oi ON o.OrderID = oi.OrderID
JOIN Products p on oi.ProductId=p.productID
WHERE  o.CustomerID=1;

--Find the total Sales for each product

SELECT p.productID,p.ProductName,SUM(Quantity*oi.Price) as "TotalSales"
FROM OrderItems oi
join products p on oi.ProductID=p.ProductID
GROUP BY p.ProductID,p.ProductName
ORDER  BY TotalSales DESC;

---Calculate the average order value
SELECT AVG(TotalAmount) FROM Orders;

--List all top 5 customers by total spending

SELECT customerID,FirstName,LastName,ts
FROM(
     SELECT c.CustomerID,c.FirstName,c.LastName,SUM(o.totalAmount) as "ts",
	 ROW_NUMBER() OVER(Order BY   totalSpent DESC) as "rn"
FROM Customers as c
JOIN Orders as o
on c.customerID=o.customerID
GROUP BY c.customerID,c.FirstName,c.LastName)
sub WHERE rn<=5;

-- Retrieve the most popular product category

SELECT CategoryID, CategoryName, TotalQuantitySold, rn
FROM (
    SELECT 
        c.CategoryID,
        c.CategoryName,
        SUM(oi.Quantity) AS TotalQuantitySold,
        ROW_NUMBER() OVER (ORDER BY SUM(oi.Quantity) DESC) AS rn
    FROM OrderItems oi
    JOIN Products p ON oi.ProductID = p.ProductID
    JOIN Categories c ON p.CategoryID = c.CategoryID
    GROUP BY c.CategoryID, c.CategoryName
) sub
WHERE rn = 1;


INSERT INTO Products(ProductName,CategoryID,Price,Stock)
VALUES('keyboard',1,39.99,0);


--List all products that are out of stock
SELECT * FROM products
WHERE stock=0;
--
SELECT ProductID,ProductName,Stock  from Products WHERE Stock=0;
--with category name;

SELECT p.productID,p.ProductName,c.categoryName,p.stock
FROM products p JOIN categories c
on p.categoryID=c.categoryID
WHERE stock=0;
-- find customers who placed orders in the last 30 days
SELECT  c.customerID,c.FirstName,c.LastName,c.Email,c.Phone
from customers as c
JOIN Orders o
on c.customerId=o.customerID
WHERE o.orderDate>=DATEADD(DAY,-30,GETDATE());

-- Calculate the total number of orders placed each month

SELECT YEAR(OrderDate) as OrderYear,
MONTH(OrderDate) as OrderMonth,
COUNT(OrderId) as TotalOrders
FROM Orders
GROUP BY YEAR(OrderDate),MONTH(OrderDate)
ORDER BY OrderYear,OrderMonth;

--Retrieve the details of the most recent order
SELECT OrderID,OrderDate,TotalAmount,FirstName,LastName FROM Orders as o 
JOIN Customers c
ON o.customerID=c.customerID
ORDER BY o.orderDate DESC;

-- Find the average price of products in each category


SELECT c.categoryID,categoryName,AVG(Price) as AveragePrice
FROM categories c JOIN Products p
on c.categoryID=p.ProductID
GROUP BY c.categoryID,c.CategoryName;
-- List customers who have never placed an order

SELECT c.CustomerId,c.FirstName,c.LastName,c.Email,c.Phone,o.totalAmount
FROM customers c right OUTER JOIN Orders o
on c.customerID=o.customerID
WHERE o.OrderID is NULL;
--
--Retrieve the total quantity sold for each product

SELECT p.ProductID,p.productName,SUM(oi.QUANTITY) as "totalQuantitySold"
from OrderItems oi join Products p
on oi.productId=p.ProductID
GROUP BY p.productId,p.productName;
--Calculate the total revenue genderated from each category


SELECT * FROM Categories;

--calculate
SELECT 
    c.categoryID,
    c.categoryName,
    SUM(oi.quantity * oi.price) AS totalRevenue
FROM 
    OrderItems oi
JOIN 
    Products p ON oi.productID = p.productID
JOIN 
    Categories c ON p.categoryID = c.categoryID
GROUP BY 
    c.categoryID, c.categoryName
ORDER BY 
    totalRevenue DESC;


-- find the highest priced product in each category
SELECT 
    c.categoryID,
    c.categoryName,
    p.productID,
    p.productName,
    p.price
FROM 
    categories c
JOIN 
    products p ON c.categoryID = p.categoryID;
	-- 

	SELECT 
    o.orderID,
    c.customerID,
    c.firstName,
    c.lastName,
    o.totalAmount
FROM 
    Orders o
JOIN 
    Customers c ON o.customerID = c.customerID
WHERE 
    o.totalAmount > 500
ORDER BY 
    o.totalAmount DESC;

	-- list products along with the number of orders they apprar in
	SELECT p.productID,p.productName,count(oi.OrderId) as OrderCount
	FROM products p Join OrderItems oi
	on p.productId=oi.productId
	group by p.productID ,p.productName
	ORDER BY orderCount DESC;

	--
	select p.productID,p.productName,COUNT(oi.OrderID) as OrderCount
	FROM OrderItems oi join products as p
	on oi.productID=p.productId
	group by p.productID ,p.productName
	ORDER BY OrderCount DESC;
	--
	SELECT country,count(customerID) as "totalCustomers"
	FROM customers GROUP BY country ORDER BY totalCustomers desc;

	SELECT c.customerID,c.FirstName,c.lastName,SUM(o.TotalAmount) as "totalSpending"
	FROM customers c join orders o
	on c.customerId=o.customerId
	GROUP by c.customerID,c.FirstName,c.lastName; 

	SELECT o.orderId,c.customerID,c.firstName,c.lastName,count(oi.OrderItemID) as "numberofItems"
	from orders o join orderItems oi
	on o.orderId=oi.OrderId
	join customers c
	on o.customerID=c.customerId
	GROUP BY o.orderID,c.customerID,c.firstName,c.lastName
	HAVING count(oi.OrderItemID)>1
	ORDER BY numberofItems;
